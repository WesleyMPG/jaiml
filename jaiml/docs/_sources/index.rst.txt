.. jaiml documentation master file, created by
   sphinx-quickstart on Wed Jul 22 04:19:03 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to jaiml's documentation!
======================================

jaiml is a module for writing aiml with the help of
Jinja2 which is a python template engine.

Quick start
---------------

In this module all the features of `Jinja2 <https://jinja.palletsprojects.com/en/2.10.x/templates/>`_ templates are available, but mostly you will use the for block which is exactly as a regular python *for* as you can see bellow.

  Example 1 - jinja for block:
    .. code-block:: xml

         {% for i in foo_list %}
         <category>
           <pattern>{{ i }}</pattern>
           <template><srai>FOO</srai></template>
         </category>
         {% endfor %}

    On this example a category will be created for every element *i* in *foo_list* and they will be the same except for the *i* value.

The next example shows how to use this module.

  Example 2 - how to use:
    .. code-block:: python
       :linenos:

        from jaiml import JaimlManager

        manager = JaimlManager(__name__, brain_file=False)

        @manager.marker
        def foo():
        buffer = """
        {% for i in greetings %}
         <category>
           <pattern>{{ i }}</pattern>
           <template><srai>HELLO</srai></template>
         </category>
         {% endfor %}
        """
        grts = ['HELLO _', 'HI', 'HI _', 'HEY', 'HEY _']
        vars = {'greetings': grts}
        return buffer, vars

        print(manager.get_output())

    This is the basic structure needed to use jaiml. At line 3 __name__ will be treated later but if *brain_file* was set to *True* JaimlManager would create an aiml output file called by default *brain.aiml*.

    The decorator :meth:`jaiml.JaimlManager.marker` at line 5 marks the function as an jaiml provider then the manager can handle it.

    In the 15 line we have the list of patterns to be replaced on i at line 8 and this list is added to a dictionary. This is an importat step because this dictionary is for passing any variable that you have used on your template, in this case *greetings*. Also the key containing the variable **must** have the same name as the used on template.

    An other way(the recomended one) to define the Example 2 foo function is:

    .. code-block:: python

        @manager.marker
        def foo():
          grts = ['HELLO _', 'HI', 'HI _', 'HEY', 'HEY _']
          vars = {'greetings': grts}
          return 'foo_example_file.xml', vars

  foo_example_file.xml is a file containing the what was in *buffer*. The template files directorie by default is called *jinja-templates* and must be placed at the same directorie as __name__. The extension .xml should be used because in this way IDEs can do syntax highlight but also are supported extensions .jinja, .j2, and .aiml.


.. toctree::
   :maxdepth: 2
   :caption: Contents:

   jaiml

